---
apiVersion: v1
kind: List
items:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: dotmesh
      #annotations:
      #  dotmesh.io/key: value
      labels:
        name: dotmesh
      namespace: dotmesh
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRole
    metadata:
      name: dotmesh
      #annotations:
      #  dotmesh.io/key: value
      labels:
        name: dotmesh
    rules:
      - apiGroups:
          - ''
        resources:
          - pods
          - namespaces
          - nodes
        verbs:
          - get
          - list
          - watch
  # TODO: bind to system:persistent-volume-provisioner?
  # https://kubernetes.io/docs/admin/authorization/rbac/#other-component-roles
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      name: dotmesh
      #annotations:
      #  dotmesh.io/key: value
      labels:
        name: dotmesh
    roleRef:
      kind: ClusterRole
      name: dotmesh
      apiGroup: rbac.authorization.k8s.io
    subjects:
      - kind: ServiceAccount
        name: dotmesh
        namespace: dotmesh
  - apiVersion: v1
    kind: Service
    metadata:
      name: dotmesh
      namespace: dotmesh
    spec:
      type: NodePort
      ports:
      - port: 32607
        nodePort: 32607
        protocol: TCP
      selector:
        name: dotmesh
  - apiVersion: extensions/v1beta1
    kind: DaemonSet
    metadata:
      name: dotmesh
      #annotations:
      #  dotmesh.io/key: value
      labels:
        name: dotmesh
      namespace: dotmesh
    spec:
      template:
        metadata:
          labels:
            name: dotmesh
        spec:
          containers:
            - name: dotmesh-outer
              command:
                - /require_zfs.sh
                - dotmesh-server
              ports:
              - containerPort: 32607
              env:
                - name: HOSTNAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: spec.nodeName
                - name: DOTMESH_ETCD_ENDPOINT
                  # etcd deployed by etcd operator.
                  value: "http://dotmesh-etcd-cluster-client.dotmesh.svc.cluster.local:2379"
                - name: DOTMESH_DOCKER_IMAGE
                  value: "quay.io/dotmesh/dotmesh-server:DOCKER_TAG"
                - name: PATH
                  value: "/bundled-lib/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                - name: LD_LIBRARY_PATH
                  value: "/bundled-lib/lib:/bundled-lib/usr/lib/"
                - name: ALLOW_PUBLIC_REGISTRATION
                  value: "1"
                # XXX some duplication here wrt dotmesh/cmd/dm/pkg/commands/cluster.go
                - name: INITIAL_ADMIN_PASSWORD_FILE
                  value: /secret/dotmesh-admin-password.txt
                - name: INITIAL_ADMIN_API_KEY_FILE
                  value: /secret/dotmesh-api-key.txt
                - name: USE_POOL_NAME
                  value: pool
                - name: USE_POOL_DIR
                  value: /var/lib/dotmesh
                - name: LOG_ADDR
                  value: "" # LOG_ADDR
                - name: DOTMESH_UPGRADES_URL # Leave this out to disable checking for new versions
                  value: "https://checkpoint.dotmesh.com/"
                - name: DOTMESH_UPGRADES_INTERVAL_SECONDS
                  value: "14400" # 4 hours
                - name: FLEXVOLUME_DRIVER_DIR
                  value: "/usr/libexec/kubernetes/kubelet-plugins/volume/exec"
              image: 'quay.io/dotmesh/dotmesh-server:DOCKER_TAG'
              imagePullPolicy: Always
              livenessProbe:
                httpGet:
                  path: /status
                  port: 32607
                initialDelaySeconds: 30
              resources:
                requests:
                  cpu: 10m
              securityContext:
                privileged: true
              volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
                - name: run-docker
                  mountPath: /run/docker
                - name: var-lib
                  mountPath: /var/lib
                - name: system-lib
                  mountPath: /system-lib/lib
                - name: dotmesh-kernel-modules
                  mountPath: /bundled-lib
                - name: dotmesh-secret
                  mountPath: /secret
                - name: test-pools-dir
                  mountPath: /dotmesh-test-pools
          #hostNetwork: true
          hostPID: true
          restartPolicy: Always
          securityContext:
            seLinuxOptions: {}
          serviceAccountName: dotmesh
          tolerations:
            - effect: NoSchedule
              operator: Exists
          volumes:
            - name: test-pools-dir
              hostPath:
                path: /dotmesh-test-pools
            - name: docker-sock
              hostPath:
                path: /var/run/docker.sock
            - name: run-docker
              hostPath:
                path: /run/docker
            - name: var-lib
              hostPath:
                path: /var/lib
            - name: system-lib
              hostPath:
                path: /lib
            - name: dotmesh-kernel-modules
              emptyDir: {}
            - name: dotmesh-secret
              secret:
                secretName: dotmesh
      updateStrategy:
        type: RollingUpdate
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: dotmesh-provisioner
      labels:
        name: dotmesh-provisioner
      namespace: dotmesh
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRole
    metadata:
      name: dotmesh-provisioner-runner
    rules:
      - apiGroups: [""]
        resources: ["persistentvolumes"]
        verbs: ["get", "list", "watch", "create", "delete"]
      - apiGroups: [""]
        resources: ["persistentvolumeclaims"]
        verbs: ["get", "list", "watch", "update"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["storageclasses"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["list", "watch", "create", "update", "patch"]
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      name: dotmesh-provisioner
    subjects:
      - kind: ServiceAccount
        name: dotmesh-provisioner
        namespace: dotmesh
    roleRef:
      kind: ClusterRole
      name: dotmesh-provisioner-runner
      apiGroup: rbac.authorization.k8s.io
  - apiVersion: apps/v1beta1 # for versions <1.8.0; use apps/v1beta2 for versions >=1.8.0
    kind: Deployment
    metadata:
      name: dotmesh-dynamic-provisioner
      namespace: dotmesh
      labels:
        app: dotmesh-dynamic-provisioner
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: dotmesh-dynamic-provisioner
      template:
        metadata:
          labels:
            app: dotmesh-dynamic-provisioner
        spec:
          serviceAccount: dotmesh-provisioner
          containers:
          - name: dotmesh-dynamic-provisioner
            image: 'quay.io/dotmesh/dotmesh-dynamic-provisioner:DOCKER_TAG'
            imagePullPolicy: "IfNotPresent"
            env:
            - name: DOTMESH_API_KEY
              valueFrom:
                secretKeyRef:
                  name: dotmesh
                  key: dotmesh-api-key.txt
  - apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: dotmesh
    provisioner: dotmesh/dotmesh-dynamic-provisioner
    parameters:
      # Sensible defaults
      dotmeshNamespace: "admin"
