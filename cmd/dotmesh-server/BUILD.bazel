load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library", "go_test")

go_library(
    name = "go_default_library",
    srcs = [
        "activestate.go",
        "auth_handler.go",
        "backoffstate.go",
        "checkupdates.go",
        "client.go",
        "communications.go",
        "controller.go",
        "discoveringstate.go",
        "docker.go",
        "dockerclient.go",
        "etcd.go",
        "failedstate.go",
        "handoffstate.go",
        "http.go",
        "inactivestate.go",
        "kubernetes.go",
        "liveness.go",
        "main.go",
        "metadata.go",
        "missingstate.go",
        "mount.go",
        "observer.go",
        "pullinitiatorstate.go",
        "pullpeerstate.go",
        "pushinitiatorstate.go",
        "pushpeerstate.go",
        "receivingstate.go",
        "registry.go",
        "repl.go",
        "replication.go",
        "rpc.go",
        "s3.go",
        "s3pullinitiatorstate.go",
        "s3pushinitiatorstate.go",
        "snapshotlogic.go",
        "statemachines.go",
        "transfers.go",
        "types.go",
        "users.go",
        "utils.go",
        "zfs.go",
    ],
    importpath = "github.com/dotmesh-io/dotmesh/cmd/dotmesh-server",
    visibility = ["//visibility:private"],
    deps = [
        "//cmd/dotmesh-server/vendor/golang.org/x/crypto/scrypt:go_default_library",
        "//pkg/auth:go_default_library",
        "//pkg/kv:go_default_library",
        "//pkg/user:go_default_library",
        "//vendor/github.com/aws/aws-sdk-go/aws:go_default_library",
        "//vendor/github.com/aws/aws-sdk-go/aws/credentials:go_default_library",
        "//vendor/github.com/aws/aws-sdk-go/aws/session:go_default_library",
        "//vendor/github.com/aws/aws-sdk-go/service/s3:go_default_library",
        "//vendor/github.com/aws/aws-sdk-go/service/s3/s3manager:go_default_library",
        "//vendor/github.com/coreos/etcd/client:go_default_library",
        "//vendor/github.com/dotmesh-io/go-checkpoint:go_default_library",
        "//vendor/github.com/fsouza/go-dockerclient:go_default_library",
        "//vendor/github.com/gorilla/handlers:go_default_library",
        "//vendor/github.com/gorilla/mux:go_default_library",
        "//vendor/github.com/gorilla/rpc/v2:go_default_library",
        "//vendor/github.com/gorilla/rpc/v2/json2:go_default_library",
        "//vendor/github.com/nu7hatch/gouuid:go_default_library",
        "//vendor/github.com/opentracing/opentracing-go:go_default_library",
        "//vendor/github.com/openzipkin/zipkin-go-opentracing:go_default_library",
        "//vendor/github.com/openzipkin/zipkin-go-opentracing/examples/middleware:go_default_library",
        "//vendor/github.com/prometheus/client_golang/prometheus:go_default_library",
        "//vendor/github.com/prometheus/client_golang/prometheus/promhttp:go_default_library",
        "//vendor/github.com/satori/go.uuid:go_default_library",
        "//vendor/github.com/sirupsen/logrus:go_default_library",
        "//vendor/golang.org/x/net/context:go_default_library",
    ],
)

go_image(
    name = "dotmesh-server",
    embed = [":go_default_library","//cmd/dotmesh-server/pkg/dind-dynamic-provisioning:dind-dynamic-provisioning"],
    visibility = ["//visibility:public"],
)

docker_push(
   name = "dotmesh-server_push",
   image = ":dotmesh-server",
   registry = "{CI_REGISTRY}",
   repository = "dotmesh/dotmesh-server",
   tag = "{DOCKERTAG}",
   stamp = True,
)

go_test(
    name = "go_default_test",
    srcs = ["rpc_test.go"],
    embed = [":go_default_library"],
)