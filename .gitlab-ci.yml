variables:

    SERVER_NAME: dotmesh-server
    PROVISIONER_NAME: dotmesh-dynamic-provisioner

    CI_DOCKER_REGISTRY: quay.io/dotmesh
    CI_DOCKER_TAG: $CI_COMMIT_SHA

    CI_DOCKER_SERVER_IMAGE: $CI_DOCKER_REGISTRY/dotmesh-server:$CI_COMMIT_SHA
    CI_DOCKER_PROVISIONER_IMAGE: $CI_DOCKER_REGISTRY/dotmesh-dynamic-provisioner:$CI_COMMIT_SHA

    CI_SERVICE_BEING_TESTED: dotmesh

stages:
    - build
    #- test
    - deploy
    - manual_deploy

before_script:
    - mkdir -p gopath
    - export GOPATH=$(pwd)/gopath
    - cd gopath
    - mkdir -p src/github.com/dotmesh-io
    - ln -s `realpath ..` ./src/github.com/dotmesh-io/dotmesh
    - cd src/github.com/dotmesh-io/dotmesh
    - docker login -u $QUAY_USER -p $QUAY_PASSWORD quay.io

build_client_linux:
    stage: build
    tags:
        - ubuntu
        - fast
    script:
        - git checkout $CI_COMMIT_REF_NAME && git reset --hard $CI_COMMIT_SHA 
        - (cd cmd/dm && ./rebuild.sh Linux)
    artifacts:
        paths:
            - binaries
        expire_in: 1 week

build_client_macos:
    stage: build
    tags:
        - ubuntu
        - fast
    script:
        - git checkout $CI_COMMIT_REF_NAME && git reset --hard $CI_COMMIT_SHA 
        - (cd cmd/dm && ./rebuild.sh Darwin)
    artifacts:
        paths:
            - binaries
        expire_in: 1 week

build_yaml:
    stage: build
    tags:
        - ubuntu
        - fast
    script:
        - (cd kubernetes && ./rebuild.sh)
    artifacts:
        paths:
            - yaml
        expire_in: 1 week

build_server:
    stage: build
    tags:
        - ubuntu
        - fast
    script:
        - git checkout $CI_COMMIT_REF_NAME && git reset --hard $CI_COMMIT_SHA 
        - (cd cmd/dotmesh-server && ./rebuild.sh) # also pushes
        - echo "pushed $CI_DOCKER_SERVER_IMAGE"
        - echo "pushed $CI_DOCKER_PROVISIONER_IMAGE"
    artifacts:
        paths:
            - cmd/dotmesh-server/target
        expire_in: 1 week

# run sanity check that things still work on Windows and macOS
#windows_docker_stable:
#    stage: test
#    tags:
#        - windows
#        - docker-stable
#    before_script:
#        - |
#          bash -c "
#          mkdir -p gopath
#          export GOPATH=$(pwd)/gopath
#          cd gopath
#          mkdir -p src/github.com/dotmesh-io
#          ln -s `realpath ..` ./src/github.com/dotmesh-io/dotmesh
#          cd src/github.com/dotmesh-io/dotmesh
#          "
#    script:
#        - |
#          bash -c "
#          cd cmd/dotmesh-server;
#          docker build -t dotmesh-server . || (sleep 30; docker build -t dotmesh-server .)
#          cd ../..
#          ./smoke.sh $(pwd)/binaries/Linux/dm dotmesh-server
#          docker system prune -fa
#          "

trigger_e2e_test:
    stage: deploy
    tags:
        - ubuntu
        - fast
    script:
        - curl -X POST -F "token=$E2E_TRIGGER_TOKEN" -F "ref=$CI_BUILD_REF_NAME" -F "variables[DOTMESH_CI_COMMIT_SHA]=$CI_COMMIT_SHA" http://gitlab.dotmesh.io:9999/api/v4/projects/30/trigger/pipeline
    except:
        - /^release-.*$/

deploy_unstable_build:
    stage: deploy
    dependencies:
        - build_client_linux
        - build_client_macos
        - build_yaml
    tags:
        - ubuntu
        - fast
    script:
        - "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no releases@get.dotmesh.io mkdir -p /pool/releases/unstable/$CI_COMMIT_REF_NAME"
        - "rsync -e 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' -avz binaries/{Linux,Darwin} yaml releases@get.dotmesh.io:/pool/releases/unstable/$CI_COMMIT_REF_NAME"
        - "echo \"Deployed to https://get.dotmesh.io/unstable/$CI_COMMIT_REF_NAME\""
    except:
        - /^release-.*$/

deploy_release_build:
    stage: deploy
    dependencies:
        - build_client_linux
        - build_client_macos
        - build_yaml
    tags:
        - ubuntu
        - fast
    script:
        - git checkout $CI_COMMIT_REF_NAME && git reset --hard $CI_COMMIT_SHA 
        - VERSION=`cd cmd/versioner; go run versioner.go`
        - "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no releases@get.dotmesh.io mkdir -p /pool/releases/$VERSION"
        - "rsync -e 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' -avz binaries/{Linux,Darwin} yaml releases@get.dotmesh.io:/pool/releases/$VERSION"
    only:
        - /^release-.*$/

mark_release_as_stable:
  stage: manual_deploy
  script:
    - git checkout $CI_COMMIT_REF_NAME && git reset --hard $CI_COMMIT_SHA 
    - VERSION=`cd cmd/versioner; go run versioner.go`
    - "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no releases@get.dotmesh.io sh -c \"true && rm -f /pool/releases/Linux && ln -s $VERSION/Linux /pool/releases && rm -f /pool/releases/Darwin && ln -s $VERSION/Darwin /pool/releases && rm -f /pool/releases/yaml && ln -fs $VERSION/yaml /pool/releases\""
  only:
    - /^release-.*$/
  when: manual
