variables:

    SERVER_NAME: dotmesh-server
    PROVISIONER_NAME: dotmesh-dynamic-provisioner
    BILLING_NAME: dotmesh-billing
    COMMUNICATIONS_NAME: dotmesh-communications
    FRONTEND_NAME: dotmesh-frontend
    TEST_RUNNER_NAME: dotmesh-frontend-test-runner

    CI_DOCKER_REGISTRY: quay.io/dotmesh
    CI_DOCKER_TAG: $CI_COMMIT_SHA

    CI_DOCKER_SERVER_IMAGE: $CI_DOCKER_REGISTRY/dotmesh-server:$CI_COMMIT_SHA
    CI_DOCKER_PROVISIONER_IMAGE: $CI_DOCKER_REGISTRY/dotmesh-dynamic-provisioner:$CI_COMMIT_SHA

    GCLOUD_REGISTRY: gcr.io/dotmesh-production
    GCLOUD_PROJECT_ID: dotmesh-production
    GCLOUD_ZONE: europe-west2-a
    GCLOUD_CLUSTER_ID: production-cluster

stages:
    - build
    - manual_deploy
    - test
    - deploy

before_script:
    - mkdir -p gopath
    - export GOPATH=$(pwd)/gopath
    - cd gopath
    - mkdir -p src/github.com/dotmesh-io
    - ln -s `realpath ..` ./src/github.com/dotmesh-io/dotmesh
    - cd src/github.com/dotmesh-io/dotmesh
    - docker login -u $QUAY_USER -p $QUAY_PASSWORD quay.io

build_client_linux:
    stage: build
    tags:
        - ubuntu
        - fast
    script:
        - (cd cmd/dm && ./rebuild.sh Linux)
    artifacts:
        paths:
            - binaries
        expire_in: 1 week

build_client_macos:
    stage: build
    tags:
        - ubuntu
        - fast
    script:
        - (cd cmd/dm && ./rebuild.sh Darwin)
    artifacts:
        paths:
            - binaries
        expire_in: 1 week

build_server:
    stage: build
    tags:
        - ubuntu
        - fast
    script:
        - (cd cmd/dotmesh-server && ./rebuild.sh) # also pushes
        - echo "pushed $CI_DOCKER_SERVER_IMAGE"
        - echo "pushed $CI_DOCKER_PROVISIONER_IMAGE"
    artifacts:
        paths:
            - cmd/dotmesh-server/target
        expire_in: 1 week

build_frontend:
    stage: build
    tags:
        - ubuntu
        - fast
    variables:
        IMAGE: $CI_DOCKER_REGISTRY/$FRONTEND_NAME
        VERSION: $CI_COMMIT_SHA
    script:
        - (cd frontend && ./rebuild.sh) # also pushes
        - echo "pushed $IMAGE:$VERSION"

build_billing:
    stage: build
    tags:
        - ubuntu
        - fast
    variables:
        IMAGE: $CI_DOCKER_REGISTRY/$BILLING_NAME:$CI_COMMIT_SHA
    script:
        - (cd billing && ./rebuild.sh) # also pushes
        - echo "pushed $IMAGE"

build_communications:
    stage: build
    tags:
        - ubuntu
        - fast
    variables:
        IMAGE: $CI_DOCKER_REGISTRY/$COMMUNICATIONS_NAME:$CI_COMMIT_SHA
    script:
        - (cd communications && ./rebuild.sh) # also pushes
        - echo "pushed $IMAGE"

build_frontend_test_runner:
    stage: build
    tags:
        - ubuntu
        - fast
    variables:
        IMAGE: $CI_DOCKER_REGISTRY/$TEST_RUNNER_NAME:$CI_COMMIT_SHA
    script:
        - (cd frontend && ./rebuild-testrunner.sh) # also pushes
        - echo "pushed $IMAGE"

deploy_to_kubernetes:
    stage: manual_deploy
    when: manual
    tags:
        - ubuntu
        - fast
    variables:
        CI_BILLING_IMAGE: $CI_DOCKER_REGISTRY/$BILLING_NAME:$CI_COMMIT_SHA
        CI_COMMUNICATIONS_IMAGE: $CI_DOCKER_REGISTRY/$COMMUNICATIONS_NAME:$CI_COMMIT_SHA
        CI_FRONTEND_IMAGE: $CI_DOCKER_REGISTRY/$FRONTEND_NAME:$CI_COMMIT_SHA
        GCLOUD_BILLING_IMAGE: $GCLOUD_REGISTRY/$BILLING_NAME:$CI_COMMIT_SHA
        GCLOUD_COMMUNICATIONS_IMAGE: $GCLOUD_REGISTRY/$COMMUNICATIONS_NAME:$CI_COMMIT_SHA
        GCLOUD_FRONTEND_IMAGE: $GCLOUD_REGISTRY/$FRONTEND_NAME:$CI_COMMIT_SHA
        GCLOUD_SERVER_IMAGE: $GCLOUD_REGISTRY/dotmesh-server:$CI_COMMIT_SHA
    before_script:
        - ./scripts/gcloud.sh login
    script:
        - docker pull $CI_BILLING_IMAGE
        - docker pull $CI_COMMUNICATIONS_IMAGE
        - docker pull $CI_FRONTEND_IMAGE
        - docker pull $CI_DOCKER_SERVER_IMAGE
        - docker tag "$CI_BILLING_IMAGE" "$GCLOUD_BILLING_IMAGE"
        - docker tag "$CI_COMMUNICATIONS_IMAGE" "$GCLOUD_COMMUNICATIONS_IMAGE"
        - docker tag "$CI_FRONTEND_IMAGE" "$GCLOUD_FRONTEND_IMAGE"
        - docker tag "$CI_DOCKER_SERVER_IMAGE" "$GCLOUD_SERVER_IMAGE"
        - ./scripts/gcloud.sh gcloud docker -- push "$GCLOUD_BILLING_IMAGE"
        - ./scripts/gcloud.sh gcloud docker -- push "$GCLOUD_COMMUNICATIONS_IMAGE"
        - ./scripts/gcloud.sh gcloud docker -- push "$GCLOUD_FRONTEND_IMAGE"
        - ./scripts/gcloud.sh gcloud docker -- push "$GCLOUD_SERVER_IMAGE"
        - export GCLOUD_DOCKER_ENV="-e GCLOUD_BILLING_IMAGE -e GCLOUD_COMMUNICATIONS_IMAGE -e GCLOUD_FRONTEND_IMAGE -e GCLOUD_SERVER_IMAGE"
        - ./scripts/gcloud.sh bash /app/scripts/deploy.sh


# run sanity check that things still work on Windows and macOS
#windows_docker_stable:
#    stage: test
#    tags:
#        - windows
#        - docker-stable
#    before_script:
#        - |
#          bash -c "
#          mkdir -p gopath
#          export GOPATH=$(pwd)/gopath
#          cd gopath
#          mkdir -p src/github.com/dotmesh-io
#          ln -s `realpath ..` ./src/github.com/dotmesh-io/dotmesh
#          cd src/github.com/dotmesh-io/dotmesh
#          "
#    script:
#        - |
#          bash -c "
#          cd cmd/dotmesh-server;
#          docker build -t dotmesh-server . || (sleep 30; docker build -t dotmesh-server .)
#          cd ../..
#          ./smoke.sh $(pwd)/binaries/Linux/dm dotmesh-server
#          docker system prune -fa
#          "

macos_docker_stable:
    stage: test
    dependencies:
        - build_server
        - build_client_macos
    tags:
        - macos
        - docker-stable
    script:
        - cd cmd/dotmesh-server
        # Possible to build just the "prod" image because binaries got passed
        # as artifact in cmd/dotmesh-server/target
        # TODO: pull the built image from $CI_DOCKER_REGISTRY, rather than
        # rebuilding it here.
        - docker build -t dotmesh-server . || (sleep 30; docker build -t dotmesh-server .)
        - cd ../..
        - ./smoke.sh $(pwd)/binaries/Darwin/dm dotmesh-server
        - docker version
        - which docker
        - docker container prune -f

#macos_docker_edge:
#    stage: test
#    dependencies:
#        - build_server
#        - build_client_macos
#    tags:
#        - macos
#        - docker-edge
#    script:
#        - cd cmd/dotmesh-server
#        # Possible to build just the "prod" image because binaries got passed
#        # as artifact in cmd/dotmesh-server/target
#        # TODO: pull the built image from $CI_DOCKER_REGISTRY, rather than
#        # rebuilding it here.
#        - docker build -t dotmesh-server . || (sleep 30; docker build -t dotmesh-server .)
#        - cd ../..
#        - ./smoke.sh $(pwd)/binaries/Darwin/dm dotmesh-server
#        - docker version
#        - which docker
#        - docker container prune -f

versioner_unit_tests:
    stage: test
    tags:
        - ubuntu
        - fast
    script:
        - cd cmd/versioner && go test

frontend:
    stage: test
    tags:
        - ubuntu
        - fast
    variables:
        INJECT_HOST_IMAGES: "dotmesh-server,dotmesh-billing,dotmesh-communications,dotmesh-frontend,dotmesh-frontend-test-runner,binocarlos/noxy,$CI_DOCKER_REGISTRY/dotmesh-chromedriver,$CI_DOCKER_REGISTRY/dotmesh-gotty"
    script:
        - echo $INJECT_HOST_IMAGES
        - mkdir frontend_artifacts
        - ./test.sh -run TestFrontend
    after_script:
        - tar -xf frontend_artifacts.tar -C frontend_artifacts
        - sudo rm frontend_artifacts.tar
        - ls -la frontend_artifacts
    artifacts:
        paths:
            - frontend_artifacts
        when: always

# run full dind tests on linux
linux_single_node:
    stage: test
    dependencies:
        - build_server
        - build_client_linux
    tags:
        - ubuntu
        - fast
    script:
        - ./test.sh -run TestSingleNode

linux_two_nodes_same_cluster:
    stage: test
    dependencies:
        - build_server
        - build_client_linux
    tags:
        - ubuntu
        - fast
    script:
        - ./test.sh -run TestTwoNodesSameCluster

linux_kubernetes:
    stage: test
    dependencies:
        - build_server
        - build_client_linux
    tags:
        - ubuntu
        - fast
    script:
        - ./test.sh -run TestKubernetes

linux_deletion_simple:
    stage: test
    dependencies:
        - build_server
        - build_client_linux
    tags:
        - ubuntu
        - fast
    script:
        - ./test.sh -run TestDeletionSimple

linux_deletion_complex:
    stage: test
    dependencies:
        - build_server
        - build_client_linux
    tags:
        - ubuntu
        - fast
    script:
        - ./test.sh -run TestDeletionComplex
    allow_failure: true

linux_two_single_node_clusters:
    stage: test
    dependencies:
        - build_server
        - build_client_linux
    tags:
        - ubuntu
        - fast
    script:
        - ./test.sh -run TestTwoSingleNodeClusters

linux_three_single_node_clusters:
    stage: test
    dependencies:
        - build_server
        - build_client_linux
    tags:
        - ubuntu
        - fast
    script:
        - ./test.sh -run TestThreeSingleNodeClusters

linux_stress:
   stage: test
   dependencies:
       - build_server
       - build_client_linux
   tags:
       - ubuntu
       - fast
   script:
       - ./test.sh -timeout 30m -run TestStress
   when: manual

deploy_client_binaries:
    stage: deploy
    dependencies:
        - build_client_linux
        - build_client_macos
    tags:
        - ubuntu
        - fast
    script:
        - rsync -avz binaries/{Linux,Darwin} luke@neo.lukemarsden.net:/pool/releases/
    only:
        - master

deploy_kubernetes_yaml:
    stage: deploy
    tags:
        - fast
    script:
        - rsync -avz kubernetes/etcd-operator-clusterrole.yaml kubernetes/etcd-operator-dep.yaml kubernetes/dotmesh.yaml luke@neo.lukemarsden.net:/pool/releases/yaml/
    only:
        - master

deploy_server_docker_image:
    stage: deploy
    tags:
        - ubuntu
        - fast
    before_script:
        - docker login -u $QUAY_USER -p $QUAY_PASSWORD quay.io
    script:
        # dotmesh-server
        - docker pull $CI_DOCKER_REGISTRY/dotmesh-server:$CI_DOCKER_TAG
        - docker tag $CI_DOCKER_REGISTRY/dotmesh-server:$CI_DOCKER_TAG $CI_DOCKER_REGISTRY/dotmesh-server:latest
        - docker push $CI_DOCKER_REGISTRY/dotmesh-server:latest
        # dotmesh-dynamic-provisioner
        - docker pull $CI_DOCKER_REGISTRY/dotmesh-dynamic-provisioner:$CI_DOCKER_TAG
        - docker tag $CI_DOCKER_REGISTRY/dotmesh-dynamic-provisioner:$CI_DOCKER_TAG $CI_DOCKER_REGISTRY/dotmesh-dynamic-provisioner:latest
        - docker push $CI_DOCKER_REGISTRY/dotmesh-dynamic-provisioner:latest
    only:
        - master

